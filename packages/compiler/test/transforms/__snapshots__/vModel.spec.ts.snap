// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: vModel transform > component > v-model for component should generate modelValueModifiers 1`] = `
"
  const n0 = _createComponent(Comp, { modelValue: () => (foo),
  "onUpdate:modelValue": () => _value => (foo = _value),
  modelValueModifiers: () => ({ trim: true, "bar-baz": true }) }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > component > v-model for component should work 1`] = `
"
  const n0 = _createComponent(Comp, { modelValue: () => (foo),
  "onUpdate:modelValue": () => _value => (foo = _value) }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > component > v-model with arguments for component should generate modelModifiers 1`] = `
"
  const n0 = _createComponent(Comp, {
    foo: () => (foo),
    "onUpdate:foo": () => _value => (foo = _value),
    fooModifiers: () => ({ trim: true }), 
    bar: () => (bar),
    "onUpdate:bar": () => _value => (bar = _value),
    barModifiers: () => ({ number: true })
  }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > component > v-model with arguments for component should work 1`] = `
"
  const n0 = _createComponent(Comp, { bar: () => (foo),
  "onUpdate:bar": () => _value => (foo = _value) }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > component > v-model with dynamic arguments for component should generate modelModifiers  1`] = `
"
  const n0 = _createComponent(Comp, { $: [
    () => ({ [foo]: foo,
    ["onUpdate:" + foo]: () => _value => (foo = _value),
    [foo + "Modifiers"]: () => ({ trim: true }) }), 
    () => ({ [bar.value]: bar,
    ["onUpdate:" + bar.value]: () => _value => (bar = _value),
    [bar.value + "Modifiers"]: () => ({ number: true }) })
  ] }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > component > v-model with dynamic arguments for component should work 1`] = `
"
  const n0 = _createComponent(Comp, { $: [
    () => ({ [arg]: foo,
    ["onUpdate:" + arg]: () => _value => (foo = _value) })
  ] }, null, true)
  return n0
"
`;

exports[`compiler: vModel transform > modifiers > .lazy 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value), { lazy: true })
  return n0
"
`;

exports[`compiler: vModel transform > modifiers > .number 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value), { number: true })
  return n0
"
`;

exports[`compiler: vModel transform > modifiers > .trim 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value), { trim: true })
  return n0
"
`;

exports[`compiler: vModel transform > should support input (checkbox) 1`] = `
"
  const n0 = t0()
  _applyCheckboxModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support input (dynamic type) 1`] = `
"
  const n0 = t0()
  _applyDynamicModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support input (radio) 1`] = `
"
  const n0 = t0()
  _applyRadioModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support input (text) 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support member expression 1`] = `
"
  const n0 = t0()
  const n1 = t0()
  const n2 = t0()
  _applyTextModel(n0, () => (setupRef.child), _value => (setupRef.child = _value))
  _applyTextModel(n1, () => (setupLet.child), _value => (setupLet.child = _value))
  _applyTextModel(n2, () => (setupMaybeRef.child), _value => (setupMaybeRef.child = _value))
  return [n0, n1, n2]
"
`;

exports[`compiler: vModel transform > should support member expression w/ inline 1`] = `
"
  const n0 = t0()
  const n1 = t0()
  const n2 = t0()
  _applyTextModel(n0, () => (setupRef.child), _value => (setupRef.child = _value))
  _applyTextModel(n1, () => (setupLet.child), _value => (setupLet.child = _value))
  _applyTextModel(n2, () => (setupMaybeRef.child), _value => (setupMaybeRef.child = _value))
  return [n0, n1, n2]
"
`;

exports[`compiler: vModel transform > should support select 1`] = `
"
  const n0 = t0()
  _applySelectModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support simple expression 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support textarea 1`] = `
"
  const n0 = t0()
  _applyTextModel(n0, () => (model), _value => (model = _value))
  return n0
"
`;

exports[`compiler: vModel transform > should support w/ dynamic v-bind 1`] = `
"
  const n0 = t0()
  _applyDynamicModel(n0, () => (model), _value => (model = _value))
  _renderEffect(() => _setDynamicProps(n0, [obj], true))
  return n0
"
`;
