// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: expression > conditional expression 1`] = `
"
  const n0 = _createIf(() => (ok), () => {
    const n2 = t0()
    const x2 = _child(n2)
    _setNodes(x2, () => (msg))
    return n2
  }, () => _createIf(() => (fail), () => {
    const n4 = t1()
    return n4
  }, () => {
    const n6 = _createNodes(null)
    return n6
  }))
  return n0
"
`;

exports[`compiler: expression > conditional expression 2`] = `
"
  const n0 = _createIf(() => (ok), () => {
    const n2 = t0()
    const x2 = _child(n2)
    _setNodes(x2, () => (msg))
    return n2
  }, () => _createIf(() => (fail), () => {
    const n4 = t1()
    return n4
  }, () => {
    const n6 = _createNodes(null)
    return n6
  }))
  return n0
"
`;

exports[`compiler: expression > conditional expression with v-once 1`] = `
"
  const n5 = t2()
  _setInsertionState(n5)
  const n0 = _createIf(() => (ok), () => {
    const n2 = t0()
    const x2 = _child(n2)
    _setNodes(x2, msg)
    return n2
  }, () => {
    const n4 = t1()
    return n4
  }, true)
  return n5
"
`;

exports[`compiler: expression > logical expression 1`] = `
"
  const n0 = _createIf(() => (ok), () => {
    const n2 = t0()
    const x2 = _child(n2)
    _setNodes(x2, () => (msg))
    return n2
  }, () => {
    const n4 = _createNodes(() => (ok))
    return n4
  })
  return n0
"
`;

exports[`compiler: text transform > consecutive text 1`] = `
"
  const n0 = _createNodes(() => (msg))
  return n0
"
`;

exports[`compiler: text transform > no consecutive text 1`] = `
"
  const n0 = _createNodes("hello world")
  return n0
"
`;

exports[`compiler: text transform > text like 1`] = `
"
  const n0 = t0()
  return n0
"
`;
