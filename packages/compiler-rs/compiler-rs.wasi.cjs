/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const __nodeFs = require('node:fs')
const __nodePath = require('node:path')
const { WASI: __nodeWASI } = require('node:wasi')
const { Worker } = require('node:worker_threads')

const {
  createOnMessage: __wasmCreateOnMessageForFsProxy,
  getDefaultContext: __emnapiGetDefaultContext,
  instantiateNapiModuleSync: __emnapiInstantiateNapiModuleSync,
} = require('@napi-rs/wasm-runtime')

const __rootDir = __nodePath.parse(process.cwd()).root

const __wasi = new __nodeWASI({
  version: 'preview1',
  env: process.env,
  preopens: {
    [__rootDir]: __rootDir,
  }
})

const __emnapiContext = __emnapiGetDefaultContext()

const __sharedMemory = new WebAssembly.Memory({
  initial: 4000,
  maximum: 65536,
  shared: true,
})

let __wasmFilePath = __nodePath.join(__dirname, 'compiler-rs.wasm32-wasi.wasm')
const __wasmDebugFilePath = __nodePath.join(__dirname, 'compiler-rs.wasm32-wasi.debug.wasm')

if (__nodeFs.existsSync(__wasmDebugFilePath)) {
  __wasmFilePath = __wasmDebugFilePath
} else if (!__nodeFs.existsSync(__wasmFilePath)) {
  try {
    __wasmFilePath = __nodePath.resolve('@vue-jsx-vapor/compiler-rs-wasm32-wasi')
  } catch {
    throw new Error('Cannot find compiler-rs.wasm32-wasi.wasm file, and @vue-jsx-vapor/compiler-rs-wasm32-wasi package is not installed.')
  }
}

const { instance: __napiInstance, module: __wasiModule, napiModule: __napiModule } = __emnapiInstantiateNapiModuleSync(__nodeFs.readFileSync(__wasmFilePath), {
  context: __emnapiContext,
  asyncWorkPoolSize: (function() {
    const threadsSizeFromEnv = Number(process.env.NAPI_RS_ASYNC_WORK_POOL_SIZE ?? process.env.UV_THREADPOOL_SIZE)
    // NaN > 0 is false
    if (threadsSizeFromEnv > 0) {
      return threadsSizeFromEnv
    } else {
      return 4
    }
  })(),
  reuseWorker: true,
  wasi: __wasi,
  onCreateWorker() {
    const worker = new Worker(__nodePath.join(__dirname, 'wasi-worker.mjs'), {
      env: process.env,
    })
    worker.onmessage = ({ data }) => {
      __wasmCreateOnMessageForFsProxy(__nodeFs)(data)
    }

    // The main thread of Node.js waits for all the active handles before exiting.
    // But Rust threads are never waited without `thread::join`.
    // So here we hack the code of Node.js to prevent the workers from being referenced (active).
    // According to https://github.com/nodejs/node/blob/19e0d472728c79d418b74bddff588bea70a403d0/lib/internal/worker.js#L415,
    // a worker is consist of two handles: kPublicPort and kHandle.
    {
      const kPublicPort = Object.getOwnPropertySymbols(worker).find(s =>
        s.toString().includes("kPublicPort")
      );
      if (kPublicPort) {
        worker[kPublicPort].ref = () => {};
      }

      const kHandle = Object.getOwnPropertySymbols(worker).find(s =>
        s.toString().includes("kHandle")
      );
      if (kHandle) {
        worker[kHandle].ref = () => {};
      }

      worker.unref();
    }
    return worker
  },
  overwriteImports(importObject) {
    importObject.env = {
      ...importObject.env,
      ...importObject.napi,
      ...importObject.emnapi,
      memory: __sharedMemory,
    }
    return importObject
  },
  beforeInit({ instance }) {
    for (const name of Object.keys(instance.exports)) {
      if (name.startsWith('__napi_register__')) {
        instance.exports[name]()
      }
    }
  },
})
module.exports = __napiModule.exports
module.exports._DynamicFlag = __napiModule.exports._DynamicFlag
module.exports.camelize = __napiModule.exports.camelize
module.exports.createSimpleExpression = __napiModule.exports.createSimpleExpression
module.exports.EMPTY_EXPRESSION = __napiModule.exports.EMPTY_EXPRESSION
module.exports.ErrorCodes = __napiModule.exports.ErrorCodes
module.exports.getExpression = __napiModule.exports.getExpression
module.exports.getLiteralExpressionValue = __napiModule.exports.getLiteralExpressionValue
module.exports.getTextLikeValue = __napiModule.exports.getTextLikeValue
module.exports.IRDynamicPropsKind = __napiModule.exports.IRDynamicPropsKind
module.exports.IRNodeTypes = __napiModule.exports.IRNodeTypes
module.exports.IRSlotType = __napiModule.exports.IRSlotType
module.exports.isBigIntLiteral = __napiModule.exports.isBigIntLiteral
module.exports.isBlockOperation = __napiModule.exports.isBlockOperation
module.exports.isConstantExpression = __napiModule.exports.isConstantExpression
module.exports.isConstantNode = __napiModule.exports.isConstantNode
module.exports.isEmptyText = __napiModule.exports.isEmptyText
module.exports.isJSXComponent = __napiModule.exports.isJSXComponent
module.exports.isMemberExpression = __napiModule.exports.isMemberExpression
module.exports.isNumericLiteral = __napiModule.exports.isNumericLiteral
module.exports.isStringLiteral = __napiModule.exports.isStringLiteral
module.exports.locStub = __napiModule.exports.locStub
module.exports.LOC_STUB = __napiModule.exports.LOC_STUB
module.exports.resolveJSXText = __napiModule.exports.resolveJSXText
module.exports.transform = __napiModule.exports.transform
module.exports.TS_NODE_TYPES = __napiModule.exports.TS_NODE_TYPES
module.exports.unwrapTSNode = __napiModule.exports.unwrapTSNode
